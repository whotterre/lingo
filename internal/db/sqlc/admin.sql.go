// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admin.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (first_name, last_name, email, password, profile_image_url)
VALUES ($1, $2, $3, $4, $5)
RETURNING admin_id, first_name, last_name, email, password, profile_image_url, joined_at
`

type CreateAdminParams struct {
	FirstName       string      `json:"first_name"`
	LastName        string      `json:"last_name"`
	Email           string      `json:"email"`
	Password        string      `json:"password"`
	ProfileImageUrl pgtype.Text `json:"profile_image_url"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (Admin, error) {
	row := q.db.QueryRow(ctx, createAdmin,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.ProfileImageUrl,
	)
	var i Admin
	err := row.Scan(
		&i.AdminID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.ProfileImageUrl,
		&i.JoinedAt,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins
WHERE admin_id = $1
RETURNING admin_id, first_name, last_name, email, profile_image_url, joined_at
`

func (q *Queries) DeleteAdmin(ctx context.Context, adminID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAdmin, adminID)
	return err
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT admin_id, first_name, last_name, email, profile_image_url, joined_at
FROM admins
WHERE email = $1
LIMIT 1
`

type GetAdminByEmailRow struct {
	AdminID         pgtype.UUID      `json:"admin_id"`
	FirstName       string           `json:"first_name"`
	LastName        string           `json:"last_name"`
	Email           string           `json:"email"`
	ProfileImageUrl pgtype.Text      `json:"profile_image_url"`
	JoinedAt        pgtype.Timestamp `json:"joined_at"`
}

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (GetAdminByEmailRow, error) {
	row := q.db.QueryRow(ctx, getAdminByEmail, email)
	var i GetAdminByEmailRow
	err := row.Scan(
		&i.AdminID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.ProfileImageUrl,
		&i.JoinedAt,
	)
	return i, err
}

const getAdminById = `-- name: GetAdminById :one
SELECT admin_id, first_name, last_name, email, profile_image_url, joined_at
FROM admins
WHERE admin_id = $1
LIMIT 1
`

type GetAdminByIdRow struct {
	AdminID         pgtype.UUID      `json:"admin_id"`
	FirstName       string           `json:"first_name"`
	LastName        string           `json:"last_name"`
	Email           string           `json:"email"`
	ProfileImageUrl pgtype.Text      `json:"profile_image_url"`
	JoinedAt        pgtype.Timestamp `json:"joined_at"`
}

func (q *Queries) GetAdminById(ctx context.Context, adminID pgtype.UUID) (GetAdminByIdRow, error) {
	row := q.db.QueryRow(ctx, getAdminById, adminID)
	var i GetAdminByIdRow
	err := row.Scan(
		&i.AdminID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.ProfileImageUrl,
		&i.JoinedAt,
	)
	return i, err
}

const getAdminForLogin = `-- name: GetAdminForLogin :one
SELECT admin_id, email, password FROM admins
WHERE email = $1 
LIMIT 1
`

type GetAdminForLoginRow struct {
	AdminID  pgtype.UUID `json:"admin_id"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
}

func (q *Queries) GetAdminForLogin(ctx context.Context, email string) (GetAdminForLoginRow, error) {
	row := q.db.QueryRow(ctx, getAdminForLogin, email)
	var i GetAdminForLoginRow
	err := row.Scan(&i.AdminID, &i.Email, &i.Password)
	return i, err
}

const getAllAdmins = `-- name: GetAllAdmins :many
SELECT admin_id, first_name, last_name, email, profile_image_url, joined_at
FROM admins
ORDER BY joined_at DESC
LIMIT $1 OFFSET $2
`

type GetAllAdminsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllAdminsRow struct {
	AdminID         pgtype.UUID      `json:"admin_id"`
	FirstName       string           `json:"first_name"`
	LastName        string           `json:"last_name"`
	Email           string           `json:"email"`
	ProfileImageUrl pgtype.Text      `json:"profile_image_url"`
	JoinedAt        pgtype.Timestamp `json:"joined_at"`
}

func (q *Queries) GetAllAdmins(ctx context.Context, arg GetAllAdminsParams) ([]GetAllAdminsRow, error) {
	rows, err := q.db.Query(ctx, getAllAdmins, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAdminsRow{}
	for rows.Next() {
		var i GetAllAdminsRow
		if err := rows.Scan(
			&i.AdminID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.ProfileImageUrl,
			&i.JoinedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdmin = `-- name: UpdateAdmin :exec
UPDATE admins
SET first_name = $1,
    last_name = $2,
    email = $3,
    password = $4,
    profile_image_url = $5
WHERE admin_id = $6
RETURNING admin_id, first_name, last_name, email, profile_image_url, joined_at
`

type UpdateAdminParams struct {
	FirstName       string      `json:"first_name"`
	LastName        string      `json:"last_name"`
	Email           string      `json:"email"`
	Password        string      `json:"password"`
	ProfileImageUrl pgtype.Text `json:"profile_image_url"`
	AdminID         pgtype.UUID `json:"admin_id"`
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) error {
	_, err := q.db.Exec(ctx, updateAdmin,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
		arg.ProfileImageUrl,
		arg.AdminID,
	)
	return err
}
